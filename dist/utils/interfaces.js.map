{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../src/utils/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["/** Result object from an API login */\nexport interface ILoginResultAPI {\n  status: boolean\n  data: { authToken: string, userId: string }\n}\n\n/** Payload structure for `postMessage` endpoint */\nexport interface IMessageAPI {\n  roomId: string,       // The room id of where the message is to be sent\n  channel: string,      // The channel name with the prefix in front of it\n  text?: string,        // The text of the message to send, is optional because of attachments\n  alias?: string,       // This will cause the messenger name to appear as the given alias, but username will still display\n  emoji?: string,       // If provided, this will make the avatar on this message be an emoji\n  avatar?: string,      // If provided, this will make the avatar use the provided image url\n  attachments?: IAttachmentAPI[] // See attachment interface below\n}\n\n/** Payload structure for message attachments */\nexport interface IAttachmentAPI {\n  color?: string,        // The color you want the order on the left side to be, any value background-css supports\n  text?: string,         // The text to display for this attachment, it is different than the message text\n  ts?: string,           // ISO timestamp, displays the time next to the text portion\n  thumb_url?: string,    // An image that displays to the left of the text, looks better when this is relatively small\n  message_link?: string, // Only applicable if the ts is provided, as it makes the time clickable to this link\n  collapsed?: boolean,   // Causes the image, audio, and video sections to be hidding when collapsed is true\n  author_name?: string,  // Name of the author\n  author_link?: string,  // Providing this makes the author name clickable and points to this link\n  author_icon?: string,  // Displays a tiny icon to the left of the Author’s name\n  title?: string,        // Title to display for this attachment, displays under the author\n  title_link?: string,   // Providing this makes the title clickable, pointing to this link\n  title_link_download_true?: string, // When this is true, a download icon appears and clicking this saves the link to file\n  image_url?: string,    // The image to display, will be “big” and easy to see\n  audio_url?: string,    // Audio file to play, only supports what html audio does\n  video_url?: string,    // Video file to play, only supports what html video does\n  fields?: IAttachmentFieldAPI[] // An array of Attachment Field Objects\n}\n\n/**\n * Payload structure for attachment field object\n * The field property of the attachments allows for “tables” or “columns” to be displayed on messages\n */\nexport interface IAttachmentFieldAPI {\n  short?: boolean,  // Whether this field should be a short field\n  title: string,    // The title of this field\n  value: string     // The value of this field, displayed underneath the title value\n}\n\n/** Result structure for message endpoints */\nexport interface IMessageResultAPI {\n  ts: number,           // Seconds since unix epoch\n  channel: string,      // Name of channel without prefix\n  message: IMessageAPI, // The sent message object\n  success: boolean      // Send status\n}\n\n/** User object structure for creation endpoints */\nexport interface INewUserAPI {\n  email?: string,                  // Email address\n  name?: string,                   // Full name\n  password: string,                // User pass\n  username: string,                // Username\n  active?: true,                   // Subscription is active\n  roles?: string[],                // Role IDs\n  joinDefaultChannels?: boolean,   // Auto join channels marked as default\n  requirePasswordChange?: boolean, // Direct to password form on next login\n  sendWelcomeEmail?: boolean,      // Send new credentials in email\n  verified?: true                  // Email address verification status\n}\n\n/** User object structure for queries (not including admin access level) */\nexport interface IUserAPI {\n  _id: string,          // MongoDB user doc ID\n  type: string,         // user / bot ?\n  status: string,       // online | offline\n  active: boolean,      // Subscription is active\n  name: string,         // Full name\n  utcOffset: number,    // Hours off UTC/GMT\n  username: string      // Username\n}\n\n/** Result structure for user data request (by non-admin) */\nexport interface IUserResultAPI {\n  user: IUserAPI,       // The requested user\n  success: boolean      // Status of request\n}\n"]}