{"version":3,"file":"testing.js","sourceRoot":"","sources":["../../src/utils/testing.ts"],"names":[],"mappings":"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","sourcesContent":["import ApiBase from '../lib/api/api'\nimport { apiUser, botUser, mockUser } from './config'\nimport {\n  IMessageAPI,\n  IMessageUpdateAPI,\n  IMessageResultAPI,\n  INewUserAPI,\n  IUserResultAPI,\n  IRoomResultAPI,\n  IChannelResultAPI,\n  IGroupResultAPI,\n  IHistoryAPI,\n  IMessageReceipt\n} from '../interfaces'\n\nconst api = new ApiBase({})\n\n/** Define common attributes for DRY tests */\nexport const testChannelName = 'tests'\nexport const testPrivateName = 'p-tests'\n\n/** Get information about a user */\nexport async function userInfo (username: string) {\n  return (await api.get('users.info', { username }, true) as IUserResultAPI)\n}\n\n/** Create a user and catch the error if they exist already */\nexport async function createUser (user: INewUserAPI) {\n  const result: IUserResultAPI = await api.post('users.create', user, true, /already in use/i)\n  return result\n}\n\n/** Get information about a channel */\nexport async function channelInfo (query: { roomName?: string, roomId?: string }) {\n  return (await api.get('channels.info', query, true) as IChannelResultAPI)\n}\n\n/** Get information about a private group */\nexport async function privateInfo (query: { roomName?: string, roomId?: string }) {\n  return (await api.get('groups.info', query, true) as IGroupResultAPI)\n}\n\n/** Get the last messages sent to a channel (in last 10 minutes) */\nexport async function lastMessages (roomId: string, count: number = 1) {\n  const now = new Date()\n  const latest = now.toISOString()\n  const oldest = new Date(now.setMinutes(now.getMinutes() - 10)).toISOString()\n  const history = (await api.get('channels.history', { roomId, latest, oldest, count }) as IHistoryAPI)\n  return history.messages\n}\n\n/** Create a room for tests and catch the error if it exists already */\nexport async function createChannel (\n  name: string,\n  members: string[] = [],\n  readOnly: boolean = false\n) {\n  return (await api.post('channels.create', { name, members, readOnly }, true) as IChannelResultAPI)\n}\n\n/** Create a private group / room and catch if exists already */\nexport async function createPrivate (\n  name: string,\n  members: string[] = [],\n  readOnly: boolean = false\n) {\n  return (await api.post('groups.create', { name, members, readOnly }, true) as IGroupResultAPI)\n}\n\n/** Send message from mock user to channel for tests to listen and respond */\n/** @todo Sometimes the post request completes before the change event emits\n *        the message to the streamer. That's why the interval is used for proof\n *        of receipt. It would be better for the endpoint to not resolve until\n *        server side handling is complete. Would require PR to core.\n */\nexport async function sendFromUser (payload: any): Promise<IMessageResultAPI> {\n  const user = await api.login({ username: mockUser.username, password: mockUser.password })\n  const endpoint = (payload.roomId && payload.roomId.indexOf(user.data.userId) !== -1)\n    ? 'dm.history'\n    : 'channels.history'\n  const roomId = (payload.roomId)\n    ? payload.roomId\n    : (await channelInfo({ roomName: testChannelName })).channel._id\n  const messageDefaults: IMessageAPI = { roomId }\n  const data: IMessageAPI = Object.assign({}, messageDefaults, payload)\n  const oldest = new Date().toISOString()\n  const result = (await api.post('chat.postMessage', data, true) as IMessageResultAPI)\n  const proof = new Promise((resolve, reject) => {\n    let looked = 0\n    const look = setInterval(async () => {\n      const { messages } = (await api.get(endpoint, { roomId, oldest }) as IHistoryAPI)\n      const found = messages.some((message: IMessageReceipt) => {\n        return result.message._id === message._id\n      })\n      if (found || looked > 10) {\n        clearInterval(look)\n        if (found) resolve()\n        else reject('API send from user, proof of receipt timeout')\n      }\n      looked++\n    }, 100)\n  })\n  await proof\n  return result\n}\n\n/** Leave user from room, to generate `ul` message (test channel by default) */\nexport async function leaveUser (room: { id?: string, name?: string } = {}) {\n  await api.login({ username: mockUser.username, password: mockUser.password })\n  if (!room.id && !room.name) room.name = testChannelName\n  const roomId = (room.id)\n    ? room.id\n    : (await channelInfo({ roomName: room.name })).channel._id\n  return (await api.post('channels.leave', { roomId }) as Boolean)\n}\n\n/** Invite user to room, to generate `au` message (test channel by default) */\nexport async function inviteUser (room: { id?: string, name?: string } = {}) {\n  let mockInfo = await userInfo(mockUser.username)\n  await api.login({ username: apiUser.username, password: apiUser.password })\n  if (!room.id && !room.name) room.name = testChannelName\n  const roomId = (room.id)\n    ? room.id\n    : (await channelInfo({ roomName: room.name })).channel._id\n  return (await api.post('channels.invite', { userId: mockInfo.user._id, roomId }) as boolean)\n}\n\n/** @todo : Join user into room (enter) to generate `uj` message type. */\n\n/** Update message sent from mock user */\nexport async function updateFromUser (payload: IMessageUpdateAPI) {\n  await api.login({ username: mockUser.username, password: mockUser.password })\n  return (await api.post('chat.update', payload, true) as IMessageResultAPI)\n}\n\n/** Create a direct message session with the mock user */\nexport async function setupDirectFromUser () {\n  await api.login({ username: mockUser.username, password: mockUser.password })\n  return (await api.post('im.create', { username: botUser.username }, true) as IRoomResultAPI)\n}\n\n/** Initialise testing instance with the required users for SDK/bot tests */\nexport async function setup () {\n  console.log('\\nPreparing instance for tests...')\n  try {\n    // Verify API user can login\n    const loginInfo = await api.login(apiUser)\n    if (!loginInfo || loginInfo.status !== 'success') {\n      throw new Error(`API user (${apiUser.username}) could not login`)\n    } else {\n      console.log(`API user (${apiUser.username}) logged in`)\n    }\n\n    // Verify or create user for bot\n    let botInfo = await userInfo(botUser.username)\n    if (!botInfo || !botInfo.success) {\n      console.log(`Bot user (${botUser.username}) not found`)\n      botInfo = await createUser(botUser)\n      if (!botInfo.success) {\n        throw new Error(`Bot user (${botUser.username}) could not be created`)\n      } else {\n        console.log(`Bot user (${botUser.username}) created`)\n      }\n    } else {\n      console.log(`Bot user (${botUser.username}) exists`)\n    }\n\n    // Verify or create mock user for talking to bot\n    let mockInfo = await userInfo(mockUser.username)\n    if (!mockInfo || !mockInfo.success) {\n      console.log(`Mock user (${mockUser.username}) not found`)\n      mockInfo = await createUser(mockUser)\n      if (!mockInfo || mockInfo.success) {\n        throw new Error(`Mock user (${mockUser.username}) could not be created`)\n      } else {\n        console.log(`Mock user (${mockUser.username}) created`)\n      }\n    } else {\n      console.log(`Mock user (${mockUser.username}) exists`)\n    }\n\n    // Verify or create channel for tests\n    let testChannelInfo = await channelInfo({ roomName: testChannelName })\n    if (!testChannelInfo || !testChannelInfo.success) {\n      console.log(`Test channel (${testChannelName}) not found`)\n      testChannelInfo = await createChannel(testChannelName, [\n        apiUser.username, botUser.username, mockUser.username\n      ])\n      if (!testChannelInfo.success) {\n        throw new Error(`Test channel (${testChannelName}) could not be created`)\n      } else {\n        console.log(`Test channel (${testChannelName}) created`)\n      }\n    } else {\n      console.log(`Test channel (${testChannelName}) exists`)\n    }\n\n    // Verify or create private room for tests\n    let testPrivateInfo = await privateInfo({ roomName: testPrivateName })\n    if (!testPrivateInfo || !testPrivateInfo.success) {\n      console.log(`Test private room (${testPrivateName}) not found`)\n      testPrivateInfo = await createPrivate(testPrivateName, [\n        apiUser.username, botUser.username, mockUser.username\n      ])\n      if (!testPrivateInfo.success) {\n        throw new Error(`Test private room (${testPrivateName}) could not be created`)\n      } else {\n        console.log(`Test private room (${testPrivateName}) created`)\n      }\n    } else {\n      console.log(`Test private room (${testPrivateName}) exists`)\n    }\n\n    await api.logout()\n  } catch (e) {\n    throw e\n  }\n}\n"]}