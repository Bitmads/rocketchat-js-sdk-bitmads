{"version":3,"file":"driver.js","sourceRoot":"","sources":["../../src/lib/driver.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events'\nimport Asteroid from 'asteroid'\n// Asteroid v2 imports\n/*\nimport { createClass } from 'asteroid'\nimport WebSocket from 'ws'\nimport { Map } from 'immutable'\nimport immutableCollectionMixin from 'asteroid-immutable-collections-mixin'\n*/\nimport * as methodCache from './methodCache'\nimport { Message } from './message'\nimport { IOptions, ICallback } from '../config/driverInterfaces'\nimport { IAsteroid, ICredentials, ISubscription, ICollection } from '../config/asteroidInterfaces'\nimport { IMessage } from '../config/messageInterfaces'\n\n/** Collection names */\nconst _messageCollectionName = 'stream-room-messages'\nconst _messageStreamName = '__my_messages__'\n\n/**\n * Asteroid ^v2 interface below, suspended for work on future branch\n * @todo Upgrade to Asteroid v2 or find a better maintained ddp client\n */\n/*\nconst Asteroid: IAsteroid = createClass([immutableCollectionMixin])\n*/\n\n// CONNECTION SETUP AND CONFIGURE\n// -----------------------------------------------------------------------------\n\n/**\n * Define connection defaults.\n * Enable SSL by default if Rocket.Chat URL contains https.\n * Remove http/s protocol to get hostname if taken from URL\n */\nconst defaults: IOptions = {\n  host: process.env.ROCKETCHAT_URL || 'localhost:3000',\n  useSsl: ((process.env.ROCKETCHAT_UR || '').toString().startsWith('https')),\n  timeout: 20 * 1000 // 20 seconds\n}\ndefaults.host = defaults.host!.replace(/(^\\w+:|^)\\/\\//, '')\n\n/**\n * Event Emitter for listening to connection.\n * @example\n *  import { driver } from 'rocketchat-bot-driver'\n *  driver.connect()\n *  driver.events.on('connected', () => console.log('driver connected'))\n */\nexport const events = new EventEmitter()\n\n/**\n * An Asteroid instance for interacting with Rocket.Chat.\n * Variable not initialised until `connect` called.\n */\nexport let asteroid: IAsteroid\n\n/**\n * Asteroid subscriptions, exported for direct polling by adapters\n * Variable not initialised until `prepMeteorSubscriptions` called.\n */\nexport let subscriptions: ISubscription[] = []\n\n/**\n * Array of messages received from reactive collection\n */\nexport let messages: ICollection\n\n/**\n * Initialise asteroid instance with given options or defaults.\n * Returns promise, resolved with Asteroid instance. Callback follows\n * error-first-pattern. Error returned or promise rejected on timeout.\n * @example <caption>Use with callback</caption>\n *  import { driver } from 'rocketchat-bot-driver'\n *  driver.connect({}, (err) => {\n *    if (err) throw err\n *    else console.log('connected')\n *  })\n * @example <caption>Using promise</caption>\n *  import { driver } from 'rocketchat-bot-driver'\n *  driver.connect()\n *    .then(() => console.log('connected'))\n *    .catch((err) => console.error(err))\n */\nexport function connect (options: IOptions = {}, callback?: ICallback): any {\n  return new Promise((resolve, reject) => {\n    const config = Object.assign({}, defaults, options)\n    console.log('[connect] Connecting', JSON.stringify(config))\n    asteroid = new Asteroid(config.host, config.useSsl)\n    // Asteroid ^v2 interface...\n    /*\n    asteroid = new Asteroid({\n      endpoint: `ws://${options.host}/websocket`,\n      SocketConstructor: WebSocket\n    })\n    */\n    setupMethodCache(asteroid) // init instance for later caching method calls\n    asteroid.on('connected', () => events.emit('connected'))\n    asteroid.on('reconnected', () => events.emit('reconnected'))\n    // let cancelled = false\n    const rejectionTimeout = setTimeout(function () {\n      console.log(`[connect] Timeout (${config.timeout})`)\n      // cancelled = true\n      const err = new Error('Asteroid connection timeout')\n      callback ? callback(err, asteroid) : reject(err)\n    }, config.timeout)\n    events.once('connected', () => {\n      console.log('[connect] Connected')\n      // if (cancelled) return asteroid.ddp.disconnect() // cancel if already rejected\n      clearTimeout(rejectionTimeout)\n      if (callback) callback(null, asteroid)\n      resolve(asteroid)\n    })\n  })\n}\n\n/**\n * Remove all active subscriptions, logout and disconnect from Rocket.Chat\n */\nexport function disconnect (): Promise<void> {\n  console.log('Unsubscribing, logging out, disconnecting')\n  unsubscribeAll()\n  return logout().then(() => Promise.resolve()) // asteroid.disconnect()) // v2 only\n}\n\n// ASYNC AND CACHE METHOD UTILS\n// -----------------------------------------------------------------------------\n\n/**\n * Setup method cache configs from env or defaults, before they are called.\n * @param asteroid The asteroid instance to cache method calls\n */\nfunction setupMethodCache (asteroid: IAsteroid): void {\n  methodCache.use(asteroid)\n  methodCache.create('getRoomIdByNameOrId', {\n    max: parseInt(process.env.ROOM_CACHE_SIZE || '10', 10),\n    maxAge: 1000 * parseInt(process.env.ROOM_CACHE_MAX_AGE || '300', 10)\n  }),\n  methodCache.create('getRoomNameById', {\n    max: parseInt(process.env.ROOM_CACHE_SIZE || '10', 10),\n    maxAge: 1000 * parseInt(process.env.ROOM_CACHE_MAX_AGE || '300', 10)\n  })\n  methodCache.create('createDirectMessage', {\n    max: parseInt(process.env.DM_ROOM_CACHE_SIZE || '10', 10),\n    maxAge: 1000 * parseInt(process.env.DM_ROOM_CACHE_MAX_AGE || '100', 10)\n  })\n}\n\n/**\n * Wraps method calls to ensure they return a Promise with caught exceptions.\n * @param method The Rocket.Chat server method, to call through Asteroid\n * @param params Single or array of parameters of the method to call\n */\nexport function asyncCall (method: string, params: any | any[]): Promise<any> {\n  if (!Array.isArray(params)) params = [params] // cast to array for apply\n  console.log(`[${method}] Calling (async): ${JSON.stringify(params)}`)\n  return Promise.resolve(asteroid.apply(method, params).result)\n    .catch((err: Error) => {\n      console.error(`[${method}] Error:`, err)\n      throw err // throw after log to stop async chain\n    })\n    .then((result: any) => {\n      (result)\n        ? console.log(`[${method}] Success: ${JSON.stringify(result)}`)\n        : console.log(`[${method}] Success`)\n      return result\n    })\n}\n\n/**\n * Call a method as async via Asteroid, or through cache if one is created.\n * @param name The Rocket.Chat server method to call\n * @param params Single or array of parameters of the method to call\n */\nexport function callMethod (name: string, params: any | any[]): Promise<any> {\n  return (methodCache.has(name))\n    ? asyncCall(name, params)\n    : cacheCall(name, params)\n}\n\n/**\n * Wraps Asteroid method calls, passed through method cache if cache is valid.\n * @param method The Rocket.Chat server method, to call through Asteroid\n * @param key Single string parameters only, required to use as cache key\n */\nexport function cacheCall (method: string, key: string): Promise<any> {\n  return methodCache.call(method, key)\n    .catch((err: Error) => {\n      console.error(`[${method}] Error:`, err)\n      throw err // throw after log to stop async chain\n    })\n    .then((result: any) => {\n      (result)\n        ? console.log(`[${method}] Success: ${JSON.stringify(result)}`)\n        : console.log(`[${method}] Success`)\n      return result\n    })\n}\n\n// LOGIN AND SUBSCRIBE TO ROOMS\n// -----------------------------------------------------------------------------\n\n/** Login to Rocket.Chat via Asteroid */\nexport function login (credentials: ICredentials): Promise<any> {\n  console.log(`[login] Logging in ${credentials.username || credentials.email}`)\n  let login: Promise<any>\n  if (process.env.ROCKETCHAT_AUTH === 'ldap') {\n    const params = [\n      credentials.username,\n      credentials.password,\n      { ldap: true, ldapOptions: {} }\n    ]\n    login = asteroid.loginWithLDAP(...params)\n  } else {\n    const usernameOrEmail = credentials.username || credentials.email || 'bot'\n    login = asteroid.loginWithPassword(usernameOrEmail, credentials.password)\n  }\n  return login.catch((err: Error) => {\n    console.error('[login] Error:', err)\n    throw err // throw after log to stop async chain\n  })\n}\n\n/** Logout of Rocket.Chat via Asteroid */\nexport function logout (): Promise<void | null> {\n  return asteroid.logout().catch((err: Error) => {\n    console.error('[Logout] Error:', err)\n    throw err // throw after log to stop async chain\n  })\n}\n\n/**\n * Subscribe to Meteor subscription\n * Resolves with subscription (added to array), with ID property\n * @todo - 3rd param of asteroid.subscribe is deprecated in Rocket.Chat?\n */\nexport function subscribe (topic: string, roomId: string): Promise<ISubscription> {\n  return new Promise((resolve, reject) => {\n    console.log(`[subscribe] Preparing subscription: ${topic}: ${roomId}`)\n    const subscription = asteroid.subscribe(topic, roomId, true)\n    subscriptions.push(subscription)\n    return subscription.ready.then((id) => {\n      console.log(`[subscribe] Stream ready: ${id}`)\n      resolve(subscription)\n    })\n    // Asteroid ^v2 interface...\n    /*\n    subscription.on('ready', () => {\n      console.log(`[${topic}] Subscribe ready`)\n      events.emit('subscription-ready', subscription)\n      subscriptions.push(subscription)\n      resolve(subscription)\n    })\n    subscription.on('error', (err: Error) => {\n      console.error(`[${topic}] Subscribe error:`, err)\n      events.emit('subscription-error', roomId, err)\n      reject(err)\n    })\n    */\n  })\n}\n\n/** Unsubscribe from Meteor subscription */\nexport function unsubscribe (subscription: ISubscription): void {\n  const index = subscriptions.indexOf(subscription)\n  if (index === -1) return\n  subscription.stop()\n  // asteroid.unsubscribe(subscription.id) // v2\n  subscriptions.splice(index, 1) // remove from collection\n  console.log(`[${subscription.id}] Unsubscribed`)\n}\n\n/** Unsubscribe from all subscriptions in collection */\nexport function unsubscribeAll (): void {\n  subscriptions.map((s: ISubscription) => unsubscribe(s))\n}\n\n/**\n * Begin subscription to room events for user.\n * Older adapters used an option for this method but it was always the default.\n */\nexport function subscribeToMessages (): Promise<ISubscription> {\n  return subscribe(_messageCollectionName, _messageStreamName)\n    .then((subscription) => {\n      messages = asteroid.getCollection(_messageCollectionName)\n      // v2\n      // messages = asteroid.collections.get(_messageCollectionName) || Map()\n      return subscription\n    })\n}\n\nexport function reactToMessages (callback: ICallback): void {\n  console.log(`[reactive] Listening for change events in collection ${messages.name}`)\n  messages.reactiveQuery({}).on('change', (_id: string) => {\n    const changedMessageQuery = messages.reactiveQuery({ _id })\n    if (changedMessageQuery.result && changedMessageQuery.result.length > 0) {\n      const changedMessage = changedMessageQuery.result[0]\n      if (changedMessage.args !== null) {\n        console.log(`[received] Message in room ${ changedMessage.args[0].rid }`)\n        callback(null, changedMessage.args[0], changedMessage.args[1])\n      } else {\n        callback(new Error('Received message without args'))\n      }\n    } else {\n      callback(new Error(`[change] Reactive query at ID ${ _id } without results`))\n    }\n  })\n}\n\n/**\n * Get every new element added to DDP in Asteroid (v2)\n * @todo Resolve this functionality within Rocket.Chat with team\n * @param callback Function to call with element details\n */\n/*\nexport function onAdded (callback: ICallback): void {\n  console.log('Setting up reactive message list...')\n  try {\n    asteroid.ddp.on('added', ({ collection, id, fields }) => {\n      console.log(`Element added to collection ${ collection }`)\n      console.log(id)\n      console.log(fields)\n      callback(null, id)\n    })\n  } catch (err) {\n    callback(err)\n  }\n}\n*/\n\n// PREPARE AND SEND MESSAGES\n// -----------------------------------------------------------------------------\n\n/** Get ID for a room by name (or ID). */\nexport function getRoomId (name: string): Promise<string> {\n  return cacheCall('getRoomIdByNameOrId', name)\n}\n\n/** Get name for a room by ID. */\nexport function getRoomName (id: string): Promise<string> {\n  return cacheCall('getRoomNameById', id)\n}\n\n/**\n * Get ID for a DM room by its recipient's name.\n * Will create a DM (with the bot) if it doesn't exist already.\n * @todo test why create resolves with object instead of simply ID\n */\nexport function getDirectMessageRoomId (username: string): Promise<string> {\n  return cacheCall('createDirectMessage', username).then((DM) => DM.rid)\n}\n\n/** Join the bot into a room by its name or ID */\nexport function joinRoom (room: string): Promise<void> {\n  return getRoomId(room).then((roomId) => asyncCall('joinRoom', roomId))\n}\n\n/** Join a set of rooms by array of names or IDs */\nexport function joinRooms (rooms: string[]): Promise<void[]> {\n  return Promise.all(rooms.map((room) => joinRoom(room)))\n}\n\n/**\n * Structure message content, optionally addressing to room ID.\n * Accepts message text string or a structured message object.\n */\nexport function prepareMessage (content: string | IMessage, roomId?: string): Message {\n  const message = new Message(content)\n  if (roomId) message.setRoomId(roomId)\n  return message\n}\n\n/**\n * Prepare and send message/s to specified room ID.\n * Accepts message text string, array of strings or a structured message object.\n * Will create one or more send calls collected into promise.\n */\nexport function sendMessageByRoomId (content: string | string[] | IMessage, roomId: string): Promise<any> {\n  let messages: Message[] = []\n  if (Array.isArray(content)) {\n    content.forEach((text) => messages.push(prepareMessage(text, roomId)))\n  } else {\n    messages.push(prepareMessage(content))\n  }\n  return Promise.all(messages.map((message) => sendMessage(message)))\n}\n\n/**\n * Prepare and send message/s to specified room name (or ID).\n * Accepts message text string, array of strings or a structured message object.\n * Will create one or more send calls collected into promise.\n */\nexport function sendMessageByRoom (content: string | string[] | IMessage, room: string): Promise<any> {\n  return getRoomId(room).then((roomId) => sendMessageByRoomId(content, roomId))\n}\n\n/**\n * Send a message to a user in a DM.\n */\nexport function sendDirectToUser (message: string | string[] | IMessage, username: string): Promise<any> {\n  return getDirectMessageRoomId(username).then((rid) => sendMessageByRoomId(message, rid))\n}\n\n/**\n * Send a prepared message object (with pre-defined room ID).\n * Usually prepared and called by sendMessageByRoomId or sendMessageByRoom.\n * In the Hubot adapter, this method accepted a room ID, which was not semantic,\n * such usage should be replaced by `sendMessageByRoom(content, roomId)`\n */\nexport function sendMessage (message: IMessage, roomId?: string): Promise<any> {\n  if (roomId) return sendMessageByRoomId(message, roomId)\n  return asyncCall('sendMessage', message)\n}\n\n/**\n * Legacy method for older adapters - sendMessage now accepts all properties\n * @deprecated since 0.0.0\n */\nexport function customMessage (message: IMessage): Promise<any> {\n  return sendMessage(message)\n}\n"]}