{"version":3,"file":"driver.js","sourceRoot":"","sources":["../../src/lib/driver.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,sCAAsC;AACtC,uCAAsC;AACtC,mCAAqC;AACrC,4CAA0B;AAC1B,2DAA4C;AAE5C,MAAM,QAAQ,GAAG,sBAAW,EAAE,CAAA;AAWjB,QAAA,QAAQ,GAAa;IAChC,IAAI,EAAE,gBAAgB;IACtB,OAAO,EAAE,EAAE,GAAG,IAAI,CAAC,aAAa;CACjC,CAAA;AASD;;;;;;GAMG;AACU,QAAA,MAAM,GAAG,IAAI,qBAAY,EAAE,CAAA;AAOxC;;;;;;;;;;;;;;;;;GAiBG;AACH,iBAAyB,UAAoB,EAAE,EAAE,QAAoB;IACnE,MAAM,CAAC,IAAI,OAAO,CAAY,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAChD,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,gBAAQ,EAAE,OAAO,CAAC,CAAA;QAC1C,gBAAQ,GAAG,IAAI,QAAQ,CAAC;YACtB,QAAQ,EAAE,QAAQ,OAAO,CAAC,IAAI,YAAY;YAC1C,iBAAiB,EAAE,YAAS;SAC7B,CAAC,CAAA;QACF,WAAW,CAAC,GAAG,CAAC,gBAAQ,CAAC,CAAA,CAAC,+CAA+C;QACzE,gBAAQ,CAAC,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,cAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAA;QACxD,gBAAQ,CAAC,EAAE,CAAC,aAAa,EAAE,GAAG,EAAE,CAAC,cAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAA;QAC5D,IAAI,SAAS,GAAG,KAAK,CAAA;QACrB,MAAM,gBAAgB,GAAG,UAAU,CAAC,GAAG,EAAE;YACvC,SAAS,GAAG,IAAI,CAAA;YAChB,MAAM,GAAG,GAAG,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAA;YACpD,+CAA+C;YAC/C,oDAAoD;YACpD,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,EAAE,gBAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;QACzD,CAAC,EAAE,OAAO,CAAC,OAAO,CAAC,CAAA;QACnB,gBAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,EAAE;YAC9B,0DAA0D;YAC1D,EAAE,CAAC,CAAC,SAAS,CAAC;gBAAC,MAAM,CAAC,gBAAQ,CAAC,UAAU,EAAE,CAAA;YAC3C,YAAY,CAAC,gBAAgB,CAAC,CAAA;YAC9B,MAAM,CAAC,CAAC,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,gBAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,gBAAQ,CAAC,CAAA;QAChF,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC;AAzBD,0BAyBC","sourcesContent":["// @ts-ignore // Asteroid is not typed\nimport { createClass } from 'asteroid'\nimport { EventEmitter } from 'events'\nimport WebSocket from 'ws'\nimport * as methodCache from './methodCache'\nimport { IAsteroid } from '../config/asteroidInterfaces'\nconst Asteroid = createClass()\n\n/**\n * Connection options type\n * @param host Rocket.Chat instance Host URL:PORT (without protocol)\n * @param timeout How long to wait (ms) before abandonning connection\n */\nexport interface IOptions {\n  host?: string,\n  timeout?: number\n}\nexport const defaults: IOptions = {\n  host: 'localhost:3000',\n  timeout: 20 * 1000 // 20 seconds\n}\n\n/**\n * Error-first callback param type\n */\nexport interface ICallback {\n  (error: Error | null, result?: any): void\n}\n\n/**\n * Event Emitter for listening to connection\n * @example\n *  import { driver } from 'rocketchat-bot-driver'\n *  driver.connect()\n *  driver.events.on('connected', () => console.log('driver connected'))\n */\nexport const events = new EventEmitter()\n\n/**\n * An Asteroid instance for interacting with Rocket.Chat\n */\nexport let asteroid: IAsteroid\n\n/**\n * Initialise asteroid instance with given options or defaults\n * @example <caption>Use with callback</caption>\n *  import { driver } from 'rocketchat-bot-driver'\n *  driver.connect({}, (err, asteroid) => {\n *    if (err) throw err\n *    else constole.log(asteroid)\n *  })\n * @example <caption>Using promise</caption>\n *  import { driver } from 'rocketchat-bot-driver'\n *  driver.connect()\n *    .then((asteroid) => {\n *      console.log(asteroid)\n *    })\n *    .catch((err) => {\n *      console.error(err)\n *    })\n */\nexport function connect (options: IOptions = {}, callback?: ICallback): Promise<any> {\n  return new Promise<IAsteroid>((resolve, reject) => {\n    options = Object.assign(defaults, options)\n    asteroid = new Asteroid({\n      endpoint: `ws://${options.host}/websocket`,\n      SocketConstructor: WebSocket\n    })\n    methodCache.use(asteroid) // init instance for later caching method calls\n    asteroid.on('connected', () => events.emit('connected'))\n    asteroid.on('reconnected', () => events.emit('reconnected'))\n    let cancelled = false\n    const rejectionTimeout = setTimeout(() => {\n      cancelled = true\n      const err = new Error('Asteroid connection timeout')\n      // if no callback available, reject the promise\n      // else, return callback using \"error-first-pattern\"\n      return callback ? callback(err, asteroid) : reject(err)\n    }, options.timeout)\n    asteroid.once('connected', () => {\n      // cancel connection and don't resolve if already rejected\n      if (cancelled) return asteroid.disconnect()\n      clearTimeout(rejectionTimeout)\n      return (callback !== undefined) ? callback(null, asteroid) : resolve(asteroid)\n    })\n  })\n}\n"]}