{"version":3,"file":"RocketChat.js","sourceRoot":"","sources":["../../../src/lib/api/RocketChat.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n\t* @module ApiRocketChat\n\t* Provides a client for handling requests with Rocket.Chat's REST API\n\t*/\n\nexport type RID = string\nimport {\n\tILogger,\n\tIAPIRequest,\n\tIUserAPI,\n\tICredentials,\n\tILoginResultAPI,\n\tICredentialsAPI,\n\tILivechatTokenAPI,\n\tILivechatRoomCredentialAPI,\n\tILivechatRoomResultAPI,\n\tINewLivechatGuestAPI,\n\tILivechatVisitorResultAPI,\n\tILivechatConfigResultAPI,\n\tILivechatRoomSurveyAPI,\n\tILivechatAgentResultAPI,\n\tINewLivechatMessageAPI,\n\tILivechatMessageResultAPI,\n\tILivechatRoomMessagesAPI,\n\tINewLivechatOfflineMessageAPI,\n\tILivechatOfflineMessageResultAPI,\n\tINewLivechatNavigationAPI,\n\tILivechatNavigationResultAPI,\n\tILivechatTranscriptResultAPI,\n\tILivechatVideoCallResultAPI,\n\tINewLivechatCustomFieldAPI,\n\tILivechatCustomFieldResultAPI,\n\tINewLivechatCustomFieldsAPI,\n\tILivechatCustomFieldsResultAPI,\n\tIMessage\n} from '../../interfaces'\n\nimport ApiBase from './api'\n\n/** Defaults for user queries */\nexport const userFields = { name: 1, username: 1, status: 1, type: 1 }\n\n/** Query helpers for user collection requests */\nexport default class ApiRocketChat extends ApiBase {\n\n  get users (): any {\n    const self = this\n    return {\n      all (fields: any = userFields) { return self.get('users.list', { fields }).then((r: any) => r.users) },\n      allNames () { return self.get('users.list', { fields: { 'username': 1 } }).then((r: any) => r.users.map((u: IUserAPI) => u.username)) },\n      allIDs () { return self.get('users.list', { fields: { '_id': 1 } }).then((r: any) => r.users.map((u: IUserAPI) => u._id)) },\n      online (fields: any = userFields) { return self.get('users.list', { fields, query: { 'status': { $ne: 'offline' } } }).then((r: any) => r.users) },\n      onlineNames () { return self.get('users.list', { fields: { 'username': 1 }, query: { 'status': { $ne: 'offline' } } }).then((r: any) => r.users.map((u: IUserAPI) => u.username)) },\n      onlineIds () { return self.get('users.list', { fields: { '_id': 1 }, query: { 'status': { $ne: 'offline' } } }).then((r: any) => r.users.map((u: IUserAPI) => u._id)) }\n    }\n  }\n\n\t// editMessage(message: IMessage) chat.update\n  joinRoom (rid: string) { return this.post('channels.join', { roomId: rid }, true) }\n\t/** Exit a room the bot has joined */\n  leaveRoom (rid: string): Promise<RID> {\n    return this.post('rooms.leave', { rid }).then(() => rid)\n  }\n\n  info () { return this.get('info', {}, true) }\n\t/**\n\t * Send a prepared message object (with pre-defined room ID).\n\t * Usually prepared and called by sendMessageByRoomId or sendMessageByRoom.\n\t */\n  sendMessage (message: IMessage) { return this.post('chat.sendMessage', { message }) }\n  getRoomIdByNameOrId (name: string): Promise<RID> { return this.get('chat.getRoomIdByNameOrId', { name }, true) }\n  getRoomNameById (name: RID): Promise<string> { return this.getRoomName(name) }\n  getRoomName (rid: string): Promise<string> { return this.get('chat.getRoomNameById', { rid }, true) }\n  getRoomId (name: string) { return this.get('chat.find', { name }, true) }\n  async createDirectMessage (username: string) { return (await this.post('im.create', { username }, true)).room }\n\n/**\n * Edit an existing message, replacing any attributes with those provided.\n * The given message object should have the ID of an existing message.\n */\n  editMessage (message: IMessage): Promise<IMessage> {\n    return this.post('chat.update', message)\n  }\n\t/**\n\t * Send a reaction to an existing message. Simple proxy for method call.\n\t * @param emoji     Accepts string like `:thumbsup:` to add üëç reaction\n\t * @param messageId ID for a previously sent message\n\t */\n  setReaction (emoji: string, messageId: string) { return this.get('\u001cchat.react', { emoji, messageId }, true) }\n\n}\n"]}