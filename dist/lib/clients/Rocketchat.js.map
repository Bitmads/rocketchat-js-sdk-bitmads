{"version":3,"file":"Rocketchat.js","sourceRoot":"","sources":["../../../src/lib/clients/Rocketchat.ts"],"names":[],"mappings":"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","sourcesContent":["import { ISocket, IDriver, Protocols } from '../drivers'\nimport ClientRest from '../api/RocketChat'\nimport { ILogger, ISocketOptions, ICallback, ISubscription } from '../../interfaces'\nimport { logger as Logger } from '../log'\n\nexport default class RocketChatClient extends ClientRest implements ISocket {\n  userId: string = ''\n  logger: ILogger = Logger\n  socket: Promise<ISocket | IDriver>\n  config: any\n\n  constructor ({ logger, allPublic, rooms, integrationId, protocol = Protocols.DDP, ...config }: any) {\n    super({ ...config, logger })\n    this.logger = logger\n    switch (protocol) {\n      case Protocols.MQTT:\n        this.socket = import(/* webpackChunkName: 'mqtt' */ '../drivers/mqtt').then(({ MQTTDriver }) => new MQTTDriver({ ...config, logger }))\n        break\n      case Protocols.DDP:\n        this.socket = import(/* webpackChunkName: 'ddp' */ '../drivers/ddp').then(({ DDPDriver }) => new DDPDriver({ ...config, logger }))\n        break\n      default:\n        throw new Error(`Invalid Protocol: ${protocol}, valids: ${Object.keys(Protocols).join()}`)\n    }\n  }\n\n  async connect (options: ISocketOptions, callback?: ICallback): Promise<any> { return (await this.socket as ISocket).connect(options) }\n  async disconnect (): Promise<any> { return (await this.socket as ISocket).disconnect() }\n  async subscribe (topic: string, ...args: any[]): Promise<ISubscription> { return (await this.socket as ISocket).subscribe(topic, ...args) }\n  async unsubscribe (subscription: ISubscription): Promise<any> { return (await this.socket as ISocket).unsubscribe(subscription) }\n  async unsubscribeAll (): Promise<any> { return (await this.socket as ISocket).unsubscribeAll() }\n  async subscribeRoom (rid: string, ...args: any[]): Promise<ISubscription[]> { return (await this.socket as IDriver).subscribeRoom(rid, ...args) }\n  async subscribeNotifyAll (): Promise<any> { return (await this.socket as IDriver).subscribeNotifyAll() }\n  async subscribeLoggedNotify (): Promise<any> { return (await this.socket as IDriver).subscribeLoggedNotify() }\n  async subscribeNotifyUser (): Promise<any> { return (await this.socket as IDriver).subscribeNotifyUser() }\n\n  async onMessage (cb: ICallback): Promise<any> {\n    return (await this.socket as IDriver).onMessage(cb)\n  }\n\n}\n"]}