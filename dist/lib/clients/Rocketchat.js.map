{"version":3,"file":"Rocketchat.js","sourceRoot":"","sources":["../../../src/lib/clients/Rocketchat.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,wCAAwD;AACxD,mEAA0C;AAE1C,gCAAyC;AAEzC,MAAqB,gBAAiB,SAAQ,oBAAU;IAMtD,YAAa,EAAqF;YAArF,EAAE,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,aAAa,EAAE,QAAQ,GAAG,mBAAS,CAAC,GAAG,OAAkB,EAAhB,kFAAS;QACzF,KAAK,mBAAM,MAAM,IAAE,MAAM,IAAG,CAAA;QAN9B,WAAM,GAAW,EAAE,CAAA;QACnB,WAAM,GAAY,YAAM,CAAA;QAMtB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACpB,QAAQ,QAAQ,EAAE;YAChB,KAAK,mBAAS,CAAC,IAAI;gBACjB,IAAI,CAAC,MAAM,GAAG,kDAAO,8BAA8B,CAAC,iBAAiB,IAAE,IAAI,CAAC,CAAC,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC,IAAI,UAAU,mBAAM,MAAM,IAAE,MAAM,IAAG,CAAC,CAAA;gBACtI,MAAK;YACP,KAAK,mBAAS,CAAC,GAAG;gBAChB,IAAI,CAAC,MAAM,GAAG,kDAAO,6BAA6B,CAAC,gBAAgB,IAAE,IAAI,CAAC,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,IAAI,SAAS,mBAAM,MAAM,IAAE,MAAM,IAAG,CAAC,CAAA;gBAClI,MAAK;YACP;gBACE,MAAM,IAAI,KAAK,CAAC,qBAAqB,QAAQ,aAAa,MAAM,CAAC,IAAI,CAAC,mBAAS,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;SAC7F;IACH,CAAC;IAEK,OAAO,CAAE,OAAuB,EAAE,QAAoB;8DAAkB,OAAO,CAAC,MAAM,IAAI,CAAC,MAAkB,CAAA,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA,CAAC,CAAC;KAAA;IAChI,UAAU;8DAAoB,OAAO,CAAC,MAAM,IAAI,CAAC,MAAkB,CAAA,CAAC,UAAU,EAAE,CAAA,CAAC,CAAC;KAAA;IAClF,SAAS,CAAE,KAAa,EAAE,GAAG,IAAW;8DAA4B,OAAO,CAAC,MAAM,IAAI,CAAC,MAAkB,CAAA,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,CAAA,CAAC,CAAC;KAAA;IACrI,WAAW,CAAE,YAA2B;8DAAkB,OAAO,CAAC,MAAM,IAAI,CAAC,MAAkB,CAAA,CAAC,WAAW,CAAC,YAAY,CAAC,CAAA,CAAC,CAAC;KAAA;IAC3H,cAAc;8DAAoB,OAAO,CAAC,MAAM,IAAI,CAAC,MAAkB,CAAA,CAAC,cAAc,EAAE,CAAA,CAAC,CAAC;KAAA;IAC1F,aAAa,CAAE,GAAW,EAAE,GAAG,IAAW;8DAA8B,OAAO,CAAC,MAAM,IAAI,CAAC,MAAkB,CAAA,CAAC,aAAa,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAA,CAAC,CAAC;KAAA;IAC3I,kBAAkB;8DAAoB,OAAO,CAAC,MAAM,IAAI,CAAC,MAAkB,CAAA,CAAC,kBAAkB,EAAE,CAAA,CAAC,CAAC;KAAA;IAClG,qBAAqB;8DAAoB,OAAO,CAAC,MAAM,IAAI,CAAC,MAAkB,CAAA,CAAC,qBAAqB,EAAE,CAAA,CAAC,CAAC;KAAA;IACxG,mBAAmB;8DAAoB,OAAO,CAAC,MAAM,IAAI,CAAC,MAAkB,CAAA,CAAC,mBAAmB,EAAE,CAAA,CAAC,CAAC;KAAA;IAEpG,SAAS,CAAE,EAAa;;YAC5B,OAAO,CAAC,MAAM,IAAI,CAAC,MAAkB,CAAA,CAAC,SAAS,CAAC,EAAE,CAAC,CAAA;QACrD,CAAC;KAAA;CAEF;AAnCD,mCAmCC","sourcesContent":["import { ISocket, IDriver, Protocols } from '../drivers'\nimport ClientRest from '../api/RocketChat'\nimport { ILogger, ISocketOptions, ICallback, ISubscription } from '../../interfaces'\nimport { logger as Logger } from '../log'\n\nexport default class RocketChatClient extends ClientRest implements ISocket {\n  userId: string = ''\n  logger: ILogger = Logger\n  socket: Promise<ISocket | IDriver>\n  config: any\n\n  constructor ({ logger, allPublic, rooms, integrationId, protocol = Protocols.DDP, ...config }: any) {\n    super({ ...config, logger })\n    this.logger = logger\n    switch (protocol) {\n      case Protocols.MQTT:\n        this.socket = import(/* webpackChunkName: 'mqtt' */ '../drivers/mqtt').then(({ MQTTDriver }) => new MQTTDriver({ ...config, logger }))\n        break\n      case Protocols.DDP:\n        this.socket = import(/* webpackChunkName: 'ddp' */ '../drivers/ddp').then(({ DDPDriver }) => new DDPDriver({ ...config, logger }))\n        break\n      default:\n        throw new Error(`Invalid Protocol: ${protocol}, valids: ${Object.keys(Protocols).join()}`)\n    }\n  }\n\n  async connect (options: ISocketOptions, callback?: ICallback): Promise<any> { return (await this.socket as ISocket).connect(options) }\n  async disconnect (): Promise<any> { return (await this.socket as ISocket).disconnect() }\n  async subscribe (topic: string, ...args: any[]): Promise<ISubscription> { return (await this.socket as ISocket).subscribe(topic, ...args) }\n  async unsubscribe (subscription: ISubscription): Promise<any> { return (await this.socket as ISocket).unsubscribe(subscription) }\n  async unsubscribeAll (): Promise<any> { return (await this.socket as ISocket).unsubscribeAll() }\n  async subscribeRoom (rid: string, ...args: any[]): Promise<ISubscription[]> { return (await this.socket as IDriver).subscribeRoom(rid, ...args) }\n  async subscribeNotifyAll (): Promise<any> { return (await this.socket as IDriver).subscribeNotifyAll() }\n  async subscribeLoggedNotify (): Promise<any> { return (await this.socket as IDriver).subscribeLoggedNotify() }\n  async subscribeNotifyUser (): Promise<any> { return (await this.socket as IDriver).subscribeNotifyUser() }\n\n  async onMessage (cb: ICallback): Promise<any> {\n    return (await this.socket as IDriver).onMessage(cb)\n  }\n\n}\n"]}