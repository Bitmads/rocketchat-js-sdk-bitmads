{"version":3,"file":"Livechat.js","sourceRoot":"","sources":["../../../src/lib/clients/Livechat.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n* @module LivechatDriver\n* Provides high-level helpers for Livechat connection, method calls, subscriptions.\n*/\nimport LivechatRest from '../api/Livechat'\nimport { ISocket, Protocols, IDriver } from '../drivers'\nimport { logger as Logger } from '../log'\nimport {\n\tILogger,\n\tISocketOptions,\n\tIRespondOptions,\n\tICallback,\n\tIMessageCallback,\n\tISubscriptionEvent,\n\tIMessage,\n\tIMessageMeta,\n\tIMessageReceipt,\n\tISubscription,\n\tILoginResult\n} from '../../interfaces'\n\nexport default class LivechatClient extends LivechatRest implements ISocket {\n  userId: string = ''\n  logger: ILogger = Logger\n  socket: Promise<ISocket | IDriver> = Promise.resolve() as any\n  constructor ({ allPublic, rooms, integrationId, protocol, ...config }: any) {\n    super(config)\n    this.import(protocol, config)\n  }\n  import (protocol: Protocols, config: any) {\n    switch (protocol) {\n      case Protocols.MQTT:\n        this.socket = import(/* webpackChunkName: 'mqtttest' */ '../drivers/mqtt').then(({ MQTTDriver }) => new MQTTDriver(config))\n        break\n      case Protocols.DDP:\n        this.socket = import(/* webpackChunkName: 'ddptest' */ '../drivers/ddp').then(({ DDPDriver }) => new DDPDriver(config))\n        break\n      default:\n        throw new Error(`Invalid Protocol: ${protocol}, valids: ${Object.keys(Protocols).join()}`)\n    }\n  }\n  async connect (options: ISocketOptions, callback?: ICallback): Promise <any> { return (await this.socket as ISocket).connect(options) }\n  async disconnect (): Promise<any> { return (await this.socket as ISocket).disconnect() }\n  async subscribe (topic: string, ...args: any[]): Promise<ISubscription> { return (await this.socket as ISocket) .subscribe(topic, args) }\n  async unsubscribe (subscription: ISubscription): Promise<any> { return (await this.socket as ISocket).unsubscribe(subscription) }\n  async unsubscribeAll (): Promise<any> { return (await this.socket as ISocket).unsubscribeAll() }\n  async subscribeRoom (rid: string, ...args: any[]): Promise<ISubscription[]> { return (await this.socket as IDriver).subscribeRoom(rid, ...args) }\n  async subscribeNotifyAll (): Promise<any> { return (await this.socket as IDriver) .subscribeNotifyAll() }\n  async subscribeLoggedNotify (): Promise<any> { return (await this.socket as IDriver) .subscribeLoggedNotify() }\n  async subscribeNotifyUser (): Promise<any> { return (await this.socket as IDriver) .subscribeNotifyUser() }\n  async onMessage (cb: ICallback): Promise<any> { return (await this.socket as IDriver).onMessage(cb) }\n  async onTyping (cb: ICallback): Promise<any> { return (await this.socket as IDriver).onTyping(cb) }\n}\n"]}