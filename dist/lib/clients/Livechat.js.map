{"version":3,"file":"Livechat.js","sourceRoot":"","sources":["../../../src/lib/clients/Livechat.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;GAGG;AACH,+DAA0C;AAC1C,wCAAwD;AACxD,gCAAyC;AAezC,MAAqB,cAAe,SAAQ,kBAAY;IAItD,YAAa,EAA6E;YAA7E,EAAE,SAAS,EAAE,KAAK,EAAE,aAAa,EAAE,QAAQ,GAAG,mBAAS,CAAC,GAAG,OAAkB,EAAhB,wEAAS;QACjF,KAAK,CAAC,MAAM,CAAC,CAAA;QAJf,WAAM,GAAW,EAAE,CAAA;QACnB,WAAM,GAAY,YAAM,CAAA;QAIvB,QAAQ,QAAQ,EAAE;YACjB,KAAK,mBAAS,CAAC,IAAI;gBAClB,IAAI,CAAC,MAAM,GAAG,kDAAO,8BAA8B,CAAC,iBAAiB,IAAE,IAAI,CAAC,CAAC,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,CAAQ,CAAA;gBAC/H,MAAK;YACL,KAAK,mBAAS,CAAC,GAAG;gBAClB,IAAI,CAAC,MAAM,GAAG,kDAAO,6BAA6B,CAAC,gBAAgB,IAAE,IAAI,CAAC,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,IAAI,SAAS,CAAC,MAAM,CAAC,CAAQ,CAAA;gBAC1H,MAAK;YACL;gBACC,MAAM,IAAI,KAAK,CAAC,qBAAqB,QAAQ,aAAa,MAAM,CAAC,IAAI,CAAC,mBAAS,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;SAC3F;IACF,CAAC;IAEK,OAAO,CAAE,OAAuB,EAAE,QAAoB;8DAAmB,OAAO,CAAC,MAAM,IAAI,CAAC,MAAkB,CAAA,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA,CAAC,CAAC;KAAA;IACjI,UAAU;8DAAoB,OAAO,CAAC,MAAM,IAAI,CAAC,MAAkB,CAAA,CAAC,UAAU,EAAE,CAAA,CAAC,CAAC;KAAA;IAClF,SAAS,CAAE,KAAa,EAAE,GAAG,IAAW;8DAA4B,OAAO,CAAC,MAAM,IAAI,CAAC,MAAkB,CAAA,CAAE,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA,CAAC,CAAC;KAAA;IACnI,WAAW,CAAE,YAA2B;8DAAkB,OAAO,CAAC,MAAM,IAAI,CAAC,MAAkB,CAAA,CAAC,WAAW,CAAC,YAAY,CAAC,CAAA,CAAC,CAAC;KAAA;IAC3H,cAAc;8DAAoB,OAAO,CAAC,MAAM,IAAI,CAAC,MAAkB,CAAA,CAAC,cAAc,EAAE,CAAA,CAAC,CAAC;KAAA;IAC1F,aAAa,CAAE,GAAW,EAAE,GAAG,IAAW;8DAA8B,OAAO,CAAC,MAAM,IAAI,CAAC,MAAkB,CAAA,CAAC,aAAa,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAA,CAAC,CAAC;KAAA;IAC3I,kBAAkB;8DAAoB,OAAO,CAAC,MAAM,IAAI,CAAC,MAAkB,CAAA,CAAE,kBAAkB,EAAE,CAAA,CAAC,CAAC;KAAA;IACnG,qBAAqB;8DAAoB,OAAO,CAAC,MAAM,IAAI,CAAC,MAAkB,CAAA,CAAE,qBAAqB,EAAE,CAAA,CAAC,CAAC;KAAA;IACzG,mBAAmB;8DAAoB,OAAO,CAAC,MAAM,IAAI,CAAC,MAAkB,CAAA,CAAE,mBAAmB,EAAE,CAAA,CAAC,CAAC;KAAA;IACrG,SAAS,CAAE,EAAa;8DAAkB,OAAO,CAAC,MAAM,IAAI,CAAC,MAAkB,CAAA,CAAC,SAAS,CAAC,EAAE,CAAC,CAAA,CAAC,CAAC;KAAA;CAEtG;AA7BD,iCA6BC","sourcesContent":["/**\n * @module LivechatDriver\n * Provides high-level helpers for Livechat connection, method calls, subscriptions.\n */\nimport LivechatRest from '../api/Livechat'\nimport { ISocket, Protocols, IDriver } from '../drivers'\nimport { logger as Logger } from '../log'\nimport {\n\tILogger,\n\tISocketOptions,\n\tIRespondOptions,\n\tICallback,\n\tIMessageCallback,\n\tISubscriptionEvent,\n\tIMessage,\n\tIMessageMeta,\n\tIMessageReceipt,\n\tISubscription,\n\tILoginResult\n} from '../../interfaces'\n\nexport default class LivechatClient extends LivechatRest implements ISocket {\n  userId: string = ''\n  logger: ILogger = Logger\n  socket: Promise<ISocket | IDriver>\n  constructor ({ allPublic, rooms, integrationId, protocol = Protocols.DDP, ...config }: any) {\n    super(config)\n\t  switch (protocol) {\n\t\t  case Protocols.MQTT:\n\t\t\t  this.socket = import(/* webpackChunkName: 'mqtt' */ '../drivers/mqtt').then(({ MQTTDriver }) => new MQTTDriver(config)) as any\n\t\t  break\n\t\t  case Protocols.DDP:\n\t\t  this.socket = import(/* webpackChunkName: 'ddp' */ '../drivers/ddp').then(({ DDPDriver }) => new DDPDriver(config)) as any\n\t\t  break\n\t\t  default:\n\t\t\t  throw new Error(`Invalid Protocol: ${protocol}, valids: ${Object.keys(Protocols).join()}`)\n\t  }\n  }\n\n  async connect (options: ISocketOptions, callback?: ICallback): Promise <any> { return (await this.socket as ISocket).connect(options) }\n  async disconnect (): Promise<any> { return (await this.socket as ISocket).disconnect() }\n  async subscribe (topic: string, ...args: any[]): Promise<ISubscription> { return (await this.socket as ISocket) .subscribe(topic, args) }\n  async unsubscribe (subscription: ISubscription): Promise<any> { return (await this.socket as ISocket).unsubscribe(subscription) }\n  async unsubscribeAll (): Promise<any> { return (await this.socket as ISocket).unsubscribeAll() }\n  async subscribeRoom (rid: string, ...args: any[]): Promise<ISubscription[]> { return (await this.socket as IDriver).subscribeRoom(rid, ...args) }\n  async subscribeNotifyAll (): Promise<any> { return (await this.socket as IDriver) .subscribeNotifyAll() }\n  async subscribeLoggedNotify (): Promise<any> { return (await this.socket as IDriver) .subscribeLoggedNotify() }\n  async subscribeNotifyUser (): Promise<any> { return (await this.socket as IDriver) .subscribeNotifyUser() }\n  async onMessage (cb: ICallback): Promise<any> { return (await this.socket as IDriver).onMessage(cb) }\n\n}\n"]}