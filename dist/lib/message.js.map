{"version":3,"file":"message.js","sourceRoot":"","sources":["../../src/lib/message.ts"],"names":[],"mappings":";;AAMA;;;GAGG;AACH;IAEE,YAAa,OAA0B;QADhC,QAAG,GAAG,IAAI,CAAA,CAAC,8BAA8B;QAE9C,EAAE,CAAC,CAAC,OAAO,OAAO,KAAK,QAAQ,CAAC;YAAC,IAAI,CAAC,GAAG,GAAG,OAAO,CAAA;QACnD,IAAI;YAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAA;IACnC,CAAC;IACD,SAAS,CAAE,MAAc;QACvB,IAAI,CAAC,GAAG,GAAG,MAAM,CAAA;QACjB,MAAM,CAAC,IAAI,CAAA;IACb,CAAC;CACF;AAVD,0BAUC","sourcesContent":["import { IMessage } from '../config/messageInterfaces'\n\n// Message class declaration implicitly implements interface\n// https://github.com/Microsoft/TypeScript/issues/340\nexport interface Message extends IMessage {}\n\n/**\n * Rocket.Chat message class.\n * @param content Accepts message text or a preformed message object\n */\nexport class Message {\n  public bot = true // all messages are from a bot\n  constructor (content: string | IMessage) {\n    if (typeof content === 'string') this.msg = content\n    else Object.assign(this, content)\n  }\n  setRoomId (roomId: string): Message {\n    this.rid = roomId\n    return this\n  }\n}\n"]}