{"version":3,"file":"Livechat.js","sourceRoot":"","sources":["../../../src/lib/drivers/Livechat.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;GAGG;AACH,+DAA0C;AAC1C,qCAA6C;AAC7C,gCAAyC;AAgBzC,MAAqB,cAAe,SAAQ,kBAAY;IAItD,YAAa,EAA6E;YAA7E,EAAE,SAAS,EAAE,KAAK,EAAE,aAAa,EAAE,QAAQ,GAAG,kBAAS,CAAC,GAAG,OAAkB,EAAhB,wEAAS;QACjF,KAAK,CAAC,MAAM,CAAC,CAAA;QAJf,WAAM,GAAW,EAAE,CAAA;QACnB,WAAM,GAAY,YAAM,CAAA;QAIvB,QAAQ,QAAQ,EAAE;YACjB,KAAK,kBAAS,CAAC,IAAI;gBAClB,IAAI,CAAC,MAAM,GAAG,kDAAO,8BAA8B,CAAC,kBAAkB,IAAE,IAAI,CAAC,CAAC,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,CAAQ,CAAA;gBAChI,MAAK;YACL,KAAK,kBAAS,CAAC,GAAG,CAAC;YACnB;gBACC,IAAI,CAAC,MAAM,GAAG,kDAAO,6BAA6B,CAAC,iBAAiB,IAAE,IAAI,CAAC,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,IAAI,SAAS,CAAC,MAAM,CAAC,CAAQ,CAAA;gBAC3H,MAAK;SACN;IACF,CAAC;IAEK,OAAO,CAAE,OAAuB,EAAE,QAAoB;;YAC3D,OAAO,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;QAC5C,CAAC;KAAA;IACK,UAAU;8DAAoB,OAAO,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,CAAA,CAAC,CAAC;KAAA;IACvE,SAAS,CAAE,KAAa,EAAE,GAAG,IAAW;8DAA4B,OAAO,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA,CAAC,CAAC;KAAA;IACvH,WAAW,CAAE,YAA2B;8DAAkB,OAAO,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,YAAY,CAAC,CAAA,CAAC,CAAC;KAAA;IAChH,cAAc;8DAAoB,OAAO,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC,cAAc,EAAE,CAAA,CAAC,CAAC;KAAA;IAC/E,aAAa,CAAE,GAAW,EAAE,GAAG,IAAW;8DAA8B,OAAO,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAA,CAAC,CAAC;KAAA;IAChI,kBAAkB;8DAAoB,OAAO,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC,kBAAkB,EAAE,CAAA,CAAC,CAAC;KAAA;IACvF,qBAAqB;8DAAoB,OAAO,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC,qBAAqB,EAAE,CAAA,CAAC,CAAC;KAAA;IAC7F,mBAAmB;8DAAoB,OAAO,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC,mBAAmB,EAAE,CAAA,CAAC,CAAC;KAAA;IAEzF,SAAS,CAAE,EAAa;;YAC5B,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,CAAA;QACnC,CAAC;KAAA;CAEF;AAjCD,iCAiCC","sourcesContent":["/**\n * @module LivechatDriver\n * Provides high-level helpers for Livechat connection, method calls, subscriptions.\n */\nimport LivechatRest from '../api/Livechat'\nimport { IDriver, Protocols } from './driver'\nimport { logger as Logger } from '../log'\nimport {\n\tILogger,\n\tISocketOptions,\n\tIRespondOptions,\n\tICallback,\n\tIMessageCallback,\n\tISubscriptionEvent,\n\tIMessage,\n\tIMessageMeta,\n\tIMessageReceipt,\n\tISubscription,\n\tILoginResult\n} from '../../interfaces'\nimport { MQTTDriver } from './protocols/mqtt'\n\nexport default class LivechatDriver extends LivechatRest implements IDriver {\n  userId: string = ''\n  logger: ILogger = Logger\n  socket: Promise<IDriver>\n  constructor ({ allPublic, rooms, integrationId, protocol = Protocols.DDP, ...config }: any) {\n    super(config)\n\t  switch (protocol) {\n\t\t  case Protocols.MQTT:\n\t\t\t  this.socket = import(/* webpackChunkName: 'mqtt' */ './protocols/mqtt').then(({ MQTTDriver }) => new MQTTDriver(config)) as any\n\t\t  break\n\t\t  case Protocols.DDP:\n\t\t  default:\n\t\t\t  this.socket = import(/* webpackChunkName: 'ddp' */ './protocols/ddp').then(({ DDPDriver }) => new DDPDriver(config)) as any\n\t\t\t  break\n\t  }\n  }\n\n  async connect (options: ISocketOptions, callback?: ICallback): Promise<IDriver> {\n\t  return (await this.socket).connect(options)\n  }\n  async disconnect (): Promise<any> { return (await this.socket).disconnect() }\n  async subscribe (topic: string, ...args: any[]): Promise<ISubscription> { return (await this.socket).subscribe(topic, args) }\n  async unsubscribe (subscription: ISubscription): Promise<any> { return (await this.socket).unsubscribe(subscription) }\n  async unsubscribeAll (): Promise<any> { return (await this.socket).unsubscribeAll() }\n  async subscribeRoom (rid: string, ...args: any[]): Promise<ISubscription[]> { return (await this.socket).subscribeRoom(rid, ...args) }\n  async subscribeNotifyAll (): Promise<any> { return (await this.socket).subscribeNotifyAll() }\n  async subscribeLoggedNotify (): Promise<any> { return (await this.socket).subscribeLoggedNotify() }\n  async subscribeNotifyUser (): Promise<any> { return (await this.socket).subscribeNotifyUser() }\n\n  async onMessage (cb: ICallback): Promise<any> {\n    (await this.socket).onMessage(cb)\n  }\n\n}\n"]}