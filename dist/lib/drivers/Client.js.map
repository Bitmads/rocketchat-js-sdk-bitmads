{"version":3,"file":"Client.js","sourceRoot":"","sources":["../../../src/lib/drivers/Client.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,2DAAsC;AACtC,qCAA6C;AAE7C,gCAAyC;AAGzC,MAAqB,YAAa,SAAQ,gBAAU;IAMlD,YAAa,EAA6E;YAA7E,EAAE,SAAS,EAAE,KAAK,EAAE,aAAa,EAAE,QAAQ,GAAG,kBAAS,CAAC,GAAG,OAAkB,EAAhB,wEAAS;QACjF,KAAK,CAAC,MAAM,CAAC,CAAA;QANf,WAAM,GAAW,EAAE,CAAA;QACnB,WAAM,GAAY,YAAM,CAAA;QAMtB,IAAI,CAAC,MAAM,GAAG;YACZ,SAAS,EAAE,KAAK;SACjB,CAAA;QACF,KAAK,CAAC,MAAM,CAAC,CAAA;QACb,QAAQ,QAAQ,EAAE;YACjB,KAAK,kBAAS,CAAC,IAAI;gBAClB,IAAI,CAAC,MAAM,GAAG,kDAAO,8BAA8B,CAAC,kBAAkB,IAAE,IAAI,CAAC,CAAC,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,CAAQ,CAAA;gBAC/H,MAAK;YACN,KAAK,kBAAS,CAAC,GAAG,CAAC;YACnB;gBACC,IAAI,CAAC,MAAM,GAAG,kDAAO,6BAA6B,CAAC,iBAAiB,IAAE,IAAI,CAAC,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,IAAI,SAAS,CAAC,MAAM,CAAC,CAAQ,CAAA;gBAC3H,MAAK;SACN;IACF,CAAC;IAED,OAAO,CAAE,OAAuB,EAAE,QAAoB,IAAsB,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA,CAAC,CAAC;IACjH,UAAU,KAAoB,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAA,CAAC,CAAC;IAC/D,SAAS,CAAE,KAAa,EAAE,GAAG,IAAW,IAA4B,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA,CAAC,CAAC;IAC/G,WAAW,CAAE,YAA2B,IAAkB,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,CAAA,CAAC,CAAC;IACxG,cAAc,KAAoB,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,CAAA,CAAC,CAAC;IACvE,aAAa,CAAE,GAAW,EAAE,GAAG,IAAW,IAA8B,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAA,CAAC,CAAC;IACxH,kBAAkB,KAAoB,OAAO,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE,CAAA,CAAC,CAAC;IAC/E,qBAAqB,KAAoB,OAAO,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE,CAAA,CAAC,CAAC;IACrF,mBAAmB,KAAoB,OAAO,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE,CAAA,CAAC,CAAC;IAEjF,SAAS,CAAE,EAAa;QACtB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,CAAA;IAC3B,CAAC;CAEF;AArCD,+BAqCC","sourcesContent":["import ClientRest from '../api/Client'\nimport { IDriver, Protocols } from './driver'\nimport { ILogger, ISocketOptions, ICallback, ISubscription } from '../../interfaces'\nimport { logger as Logger } from '../log'\nimport { MQTTDriver } from './protocols/mqtt'\n\nexport default class ClientDriver extends ClientRest implements IDriver {\n  userId: string = ''\n  logger: ILogger = Logger\n  socket: IDriver\n  config: any\n\n  constructor ({ allPublic, rooms, integrationId, protocol = Protocols.DDP, ...config }: any) {\n    super(config)\n    this.config = {\n      allPublic, rooms\n    }\n\t  super(config)\n\t  switch (protocol) {\n\t\t  case Protocols.MQTT:\n\t\t\t  this.socket = import(/* webpackChunkName: 'mqtt' */ './protocols/mqtt').then(({ MQTTDriver }) => new MQTTDriver(config)) as any\n\t\t\t  break\n\t\t  case Protocols.DDP:\n\t\t  default:\n\t\t\t  this.socket = import(/* webpackChunkName: 'ddp' */ './protocols/ddp').then(({ DDPDriver }) => new DDPDriver(config)) as any\n\t\t\t  break\n\t  }\n  }\n\n  connect (options: ISocketOptions, callback?: ICallback): Promise<IDriver> { return this.socket.connect(options) }\n  disconnect (): Promise<any> { return this.socket.disconnect() }\n  subscribe (topic: string, ...args: any[]): Promise<ISubscription> { return this.socket.subscribe(topic, args) }\n  unsubscribe (subscription: ISubscription): Promise<any> { return this.socket.unsubscribe(subscription) }\n  unsubscribeAll (): Promise<any> { return this.socket.unsubscribeAll() }\n  subscribeRoom (rid: string, ...args: any[]): Promise<ISubscription[]> { return this.socket.subscribeRoom(rid, ...args) }\n  subscribeNotifyAll (): Promise<any> { return this.socket.subscribeNotifyAll() }\n  subscribeLoggedNotify (): Promise<any> { return this.socket.subscribeLoggedNotify() }\n  subscribeNotifyUser (): Promise<any> { return this.socket.subscribeNotifyUser() }\n\n  onMessage (cb: ICallback): void {\n    this.socket.onMessage(cb)\n  }\n\n}\n"]}