{"version":3,"file":"mqtt.js","sourceRoot":"","sources":["../../../../src/lib/drivers/protocols/mqtt.ts"],"names":[],"mappings":"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","sourcesContent":["import ClientRest from '../../api/Client'\nimport mqtt from 'mqtt/browserMqtt.js'\nimport { EventEmitter } from 'tiny-events'\n\nimport { Message } from '../../message'\nimport { logger as Logger } from '../../log'\nimport {\n\tILogger,\n\tISocketOptions,\n\tIRespondOptions,\n\tICallback,\n\tIMessageCallback,\n\tISubscriptionEvent,\n\tIMessage,\n\tIMessageMeta,\n\tIMessageReceipt,\n\tISubscription,\n\tICredentials,\n\tILoginResult\n} from '../../../interfaces'\nimport { IDriver } from '../driver'\n\nexport class MQTTDriver extends EventEmitter implements IDriver {\n  logger: ILogger\n  config: ISocketOptions\n  socket: any\n  constructor ({ host, integrationId, config, logger = Logger, ...moreConfigs }: any) {\n    super()\n\n    this.config = {\n      ...config,\n      ...moreConfigs,\n      host: host.replace(/(^\\w+:|^)\\/\\//, ''),\n      timeout: 20000\n\t\t\t// reopen: number\n\t\t\t// ping: number\n\t\t\t// close: number\n\t\t\t// integration: string\n    }\n    this.socket = mqtt\n    this.logger = logger\n  }\n\n  connect (options: ISocketOptions): Promise<any> {\n    this.socket.connect(this.config.host)\n\n    return new Promise((resolve, reject) => {\n\t\t\t// TODO: removelisteners\n      this.socket.once('connect', resolve)\n      this.socket.once('error', reject)\n    })\n  }\n  disconnect (): Promise<any> {\n    this.socket.end()\n    return Promise.resolve(this.socket)\n  }\n\n  subscribe (topic: string, ...args: any[]): Promise<ISubscription> {\n    return new Promise((resolve, reject) => {\n      this.socket(topic, [...args, (err: any, granted: any) => {\n        if (err) {\n          return reject(err)\n        }\n        return resolve(granted)\n      }])\n    })\n  }\n\n  unsubscribe (subscription: ISubscription, ...args: any[]): Promise<IDriver> {\n    return new Promise((resolve, reject) => {\n      this.socket.unsubscribe(subscription.name, [...args, (err: any, granted: any) => {\n        if (err) {\n          return reject(err)\n        }\n        return resolve(granted)\n      }])\n    })\n  }\n\n  unsubscribeAll (): Promise<IDriver> {\n    return Promise.resolve() as any\n  }\n  subscribeNotifyAll (): Promise<any> {\n    return Promise.resolve() as any\n  }\n\n  subscribeLoggedNotify (): Promise<any> {\n    return Promise.resolve() as any\n  }\n\n  subscribeNotifyUser (): Promise<any> {\n    return Promise.resolve() as any\n  }\n\n  login (credentials: ICredentials, args?: any): Promise<any> {\n    return Promise.resolve() as any\n  }\n\t// usertyping room-messages deleted messages\n  subscribeRoom (rid: string, ...args: any[]): Promise<ISubscription[]> {\n    return this.subscribe(`room-messages/${rid}`, { qos: 1 }) as any\n  }\n\n  onMessage (cb: ICallback): void {\n    this.socket.on('message', (topic: string, message: IMessage) => {\n      if (/room-messages/.test(topic)) {\n        cb(message as any)// TODO apply msgpack\n      }\n    })\n  }\n}\n"]}