{"version":3,"file":"mqtt.js","sourceRoot":"","sources":["../../../src/lib/drivers/mqtt.ts"],"names":[],"mappings":"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","sourcesContent":["import ClientRest from '../api/RocketChat'\nimport { Client } from 'paho-mqtt/src/paho-mqtt'\nimport { EventEmitter } from 'tiny-events'\n\nimport { Message } from '../message'\nimport { logger as Logger } from '../log'\nimport { ISocket, IDriver } from './index'\n\nimport {\n\tILogger,\n\tISocketOptions,\n\tIRespondOptions,\n\tICallback,\n\tIMessageCallback,\n\tISubscriptionEvent,\n\tIMessage,\n\tIMessageMeta,\n\tIMessageReceipt,\n\tISubscription,\n\tICredentials,\n\tILoginResult\n} from '../../interfaces'\n\nexport class MQTTDriver extends EventEmitter implements ISocket, IDriver {\n  logger: ILogger\n  config: ISocketOptions\n  socket: any\n  constructor ({ host = 'https://iot.eclipse.org', path = '/mqtt', integrationId, config, logger = Logger, ...moreConfigs }: any) {\n    super()\n    host = 'http://test.mosquitto.org'\n    const [, _host = host, , port = 8080] = new RegExp('(.*?)(:([0-9]+))?$').exec(host || 'localhost:3000') || []\n    this.config = {\n      ...config,\n      ...moreConfigs,\n      host: _host.replace(/^http/, 'ws'),\n      timeout: 20000,\n      port: port\n\t\t\t// reopen: number\n\t\t\t// ping: number\n\t\t\t// close: number\n\t\t\t// integration: string\n    }\n\n    this.logger = logger\n\n    if (/https/.test(host)) {\n      this.socket = new Client(this.config.host + path, 'clientId')\n    } else {\n      this.socket = new Client((this.config.host || '').replace('http://', '').replace('ws://', ''), Number(port), path, 'clientId')\n    }\n    this.socket.onMessageArrived = ({ destinationName, payloadString }: any) => {\n      if (/room-message/.test(destinationName)) {\n        this.emit('message', { topic: destinationName, message: payloadString })\n      }\n    }\n  }\n\n  connect (options: ISocketOptions): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.socket.connect({ onSuccess: resolve, mqttVersion: 3, onFailure: reject, useSSL: /https/.test(this.config.host || '') })\n    })\n  }\n  disconnect (): Promise<any> {\n    this.socket.end()\n    return Promise.resolve(this.socket)\n  }\n\n  subscribe (topic: string, { qos = 0 }: any): Promise<ISubscription> {\n    return new Promise((resolve, reject) => {\n      this.socket.subscribe(topic, { qos, onFailure: (...args: any[]) => {\n        console.log(...args)\n        reject(args)\n      }, onSuccess: (...args: any[]) => {\n        console.log(...args)\n        resolve(args as any)\n\t\t\t }\n      })\n    })\n  }\n\n  unsubscribe (subscription: ISubscription, ...args: any[]): Promise < ISocket > {\n    return new Promise((resolve, reject) => {\n      this.socket.unsubscribe(subscription.name, [...args, (err: any, granted: any) => {\n        if (err) {\n          return reject(err)\n        }\n        return resolve(granted)\n      }])\n    })\n  }\n\n  unsubscribeAll (): Promise < ISocket > {\n    return Promise.resolve() as any\n  }\n  subscribeNotifyAll (): Promise < any > {\n    return Promise.resolve() as any\n  }\n\n  subscribeLoggedNotify (): Promise < any > {\n    return Promise.resolve() as any\n  }\n\n  subscribeNotifyUser (): Promise < any > {\n    return Promise.resolve() as any\n  }\n\n  login (credentials: ICredentials, args ?: any): Promise < any > {\n    return Promise.resolve() as any\n  }\n\t// usertyping room-messages deleted messages\n  subscribeRoom (rid: string, ...args: any[]): Promise < ISubscription[] > {\n    return this.subscribe(`room-messages/${rid}`, { qos: 1 }) as any\n  }\n\n  onMessage (cb: ICallback): void {\n    this.on('message', ({ topic, message }: any) => {\n      console.log(topic)\n      if (/room-messages/.test(topic)) {\n        cb(message as any)// TODO apply msgpack\n      }\n    })\n  }\n  async onTyping (cb: ICallback): Promise < any > {\n    return new Promise((resolve) => {\n      resolve(this.on('notify-room', ({ fields: { args: [username, isTyping] } }: any) => {\n        cb(username, isTyping)\n      }))\n\n    })\n  }\n\n}\n"]}